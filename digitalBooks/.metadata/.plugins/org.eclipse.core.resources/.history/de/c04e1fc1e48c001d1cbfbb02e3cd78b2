package com.digitalbooks.bookService.services;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.digitalbooks.bookService.repository.BookRepository;
import com.digitalbooks.bookService.repository.SubscriptionRepository;
@Service
public class ReaderService {

//	@Autowired
//	UserRepository userRepo;
	@Autowired
	BookRepository bookRepo;
	@Autowired
	SubscriptionRepository subRepo;
	
//	public Subscription subscribeBook(int id, SubscriptionRequest subscriptionRequest) {
//		UserDetail user =  userRepo.findById(id).get();
//		Subscription subscription = new Subscription();
//		subscription.setDate(LocalDate.now());
//		subscription.setTime(LocalTime.now());
//		Set<Book> books = new HashSet<Book>();
//		subscriptionRequest.getBooksIds().forEach(i -> {
//			books.add(bookRepo.findById(i).get());
//		});
//		subscription.setSubscribedBooks(books);
//		for(Book b:books) {
//			b.setSubscribed(true);
//			
//			books.add(b);
//		}
//		bookRepo.saveAll(books);
//		return subRepo.save(subscription);
//		
//	}
	
//	public Set<Book> getSubscribedBooks(int userId) {
//		List<Subscription> subscribe = subRepo.findByUserId(userId);
//		Set<Book> books = new HashSet<Book>();
//		subscribe.forEach(sub -> {
//			
//			books.addAll(sub.getSubscribedBooks());
//			
//		});
//		if (!books.isEmpty()) {
//			
//			return books;
//		}
//		return Collections.emptySet();
//	}

/*	public Set<Book> getSubscribedBooksbyEmail(String emailId) {
		List<Subscription> subscribe = subRepo.findbyEmail(emailId);
		Set<Book> books = new HashSet<Book>();
		subscribe.forEach(sub -> {
			books.addAll(sub.getSubscribedBooks());
		});
		if (!books.isEmpty()) {
			return books;
		}
		return Collections.emptySet();
	}*/

//	public Set<Book> getSubscribedBooksbyId(int userId, int subId) {
//		List<Subscription> subscribe = subRepo.findByUserId(userId);
//		Set<Book> books = new HashSet<Book>();
//		subscribe.forEach(sub -> {
//			if(sub.getId()==subId) {
//				books.addAll(sub.getSubscribedBooks());
//			}
//			
//		});
//		if (!books.isEmpty()) {
//			return books.stream().filter(b->b.getActive() == true).collect(Collectors.toSet());
//		}
//		return Collections.emptySet();
//	}
	
//	public Set<Book> cancelSubscription(int userId, int subId) {
//		List<Subscription> subscribe = subRepo.findByUserId(userId);
//		Set<Book> books = new HashSet<Book>();
//		subscribe.forEach(sub -> {
//			if(sub.getId()==(subId)) {
//				LocalDateTime dateTime =  LocalDateTime.now();
//				LocalDate oldDate= sub.getDate();
//				LocalTime oldTime = sub.getTime();
//				LocalDateTime localDateTime = LocalDateTime.of(oldDate, oldTime);
//				long duration = dateTime.until(localDateTime, ChronoUnit.HOURS);
//				
//				books.addAll(sub.getSubscribedBooks());
//			}
//			
//		});
//		if (!books.isEmpty()) {
//			
//			for(Book b:books) {
//				b.setSubscribed(false);
//				books.add(b);
//			}
//			bookRepo.saveAll(books);
//			return books;
//		}
//		return Collections.emptySet();
//	}
}
